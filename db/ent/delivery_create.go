// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/TylerGrey/ent-shop/db/ent/delivery"
	"github.com/TylerGrey/ent-shop/db/ent/order"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DeliveryCreate is the builder for creating a Delivery entity.
type DeliveryCreate struct {
	config
	mutation *DeliveryMutation
	hooks    []Hook
}

// SetCity sets the city field.
func (dc *DeliveryCreate) SetCity(s string) *DeliveryCreate {
	dc.mutation.SetCity(s)
	return dc
}

// SetNillableCity sets the city field if the given value is not nil.
func (dc *DeliveryCreate) SetNillableCity(s *string) *DeliveryCreate {
	if s != nil {
		dc.SetCity(*s)
	}
	return dc
}

// SetStreet sets the street field.
func (dc *DeliveryCreate) SetStreet(s string) *DeliveryCreate {
	dc.mutation.SetStreet(s)
	return dc
}

// SetNillableStreet sets the street field if the given value is not nil.
func (dc *DeliveryCreate) SetNillableStreet(s *string) *DeliveryCreate {
	if s != nil {
		dc.SetStreet(*s)
	}
	return dc
}

// SetZipcode sets the zipcode field.
func (dc *DeliveryCreate) SetZipcode(s string) *DeliveryCreate {
	dc.mutation.SetZipcode(s)
	return dc
}

// SetNillableZipcode sets the zipcode field if the given value is not nil.
func (dc *DeliveryCreate) SetNillableZipcode(s *string) *DeliveryCreate {
	if s != nil {
		dc.SetZipcode(*s)
	}
	return dc
}

// SetCreatedAt sets the created_at field.
func (dc *DeliveryCreate) SetCreatedAt(t time.Time) *DeliveryCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (dc *DeliveryCreate) SetNillableCreatedAt(t *time.Time) *DeliveryCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the updated_at field.
func (dc *DeliveryCreate) SetUpdatedAt(t time.Time) *DeliveryCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (dc *DeliveryCreate) SetNillableUpdatedAt(t *time.Time) *DeliveryCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetStatus sets the status field.
func (dc *DeliveryCreate) SetStatus(d delivery.Status) *DeliveryCreate {
	dc.mutation.SetStatus(d)
	return dc
}

// SetOrderID sets the order edge to Order by id.
func (dc *DeliveryCreate) SetOrderID(id int) *DeliveryCreate {
	dc.mutation.SetOrderID(id)
	return dc
}

// SetNillableOrderID sets the order edge to Order by id if the given value is not nil.
func (dc *DeliveryCreate) SetNillableOrderID(id *int) *DeliveryCreate {
	if id != nil {
		dc = dc.SetOrderID(*id)
	}
	return dc
}

// SetOrder sets the order edge to Order.
func (dc *DeliveryCreate) SetOrder(o *Order) *DeliveryCreate {
	return dc.SetOrderID(o.ID)
}

// Mutation returns the DeliveryMutation object of the builder.
func (dc *DeliveryCreate) Mutation() *DeliveryMutation {
	return dc.mutation
}

// Save creates the Delivery in the database.
func (dc *DeliveryCreate) Save(ctx context.Context) (*Delivery, error) {
	if err := dc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Delivery
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeliveryCreate) SaveX(ctx context.Context) *Delivery {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DeliveryCreate) preSave() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := delivery.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := delivery.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := delivery.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (dc *DeliveryCreate) sqlSave(ctx context.Context) (*Delivery, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DeliveryCreate) createSpec() (*Delivery, *sqlgraph.CreateSpec) {
	var (
		d     = &Delivery{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: delivery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: delivery.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldCity,
		})
		d.City = value
	}
	if value, ok := dc.mutation.Street(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldStreet,
		})
		d.Street = value
	}
	if value, ok := dc.mutation.Zipcode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldZipcode,
		})
		d.Zipcode = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: delivery.FieldCreatedAt,
		})
		d.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: delivery.FieldUpdatedAt,
		})
		d.UpdatedAt = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: delivery.FieldStatus,
		})
		d.Status = value
	}
	if nodes := dc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   delivery.OrderTable,
			Columns: []string{delivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}

// DeliveryCreateBulk is the builder for creating a bulk of Delivery entities.
type DeliveryCreateBulk struct {
	config
	builders []*DeliveryCreate
}

// Save creates the Delivery entities in the database.
func (dcb *DeliveryCreateBulk) Save(ctx context.Context) ([]*Delivery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Delivery, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*DeliveryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DeliveryCreateBulk) SaveX(ctx context.Context) []*Delivery {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
