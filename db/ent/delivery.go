// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/TylerGrey/ent-shop/db/ent/delivery"
	"github.com/TylerGrey/ent-shop/db/ent/order"
	"github.com/facebook/ent/dialect/sql"
)

// Delivery is the model entity for the Delivery schema.
type Delivery struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// Zipcode holds the value of the "zipcode" field.
	Zipcode string `json:"zipcode,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status delivery.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryQuery when eager-loading is set.
	Edges DeliveryEdges `json:"edges"`
}

// DeliveryEdges holds the relations/edges for other nodes in the graph.
type DeliveryEdges struct {
	// Order holds the value of the order edge.
	Order *Order
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delivery) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // city
		&sql.NullString{}, // street
		&sql.NullString{}, // zipcode
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // status
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delivery fields.
func (d *Delivery) assignValues(values ...interface{}) error {
	if m, n := len(values), len(delivery.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field city", values[0])
	} else if value.Valid {
		d.City = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field street", values[1])
	} else if value.Valid {
		d.Street = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field zipcode", values[2])
	} else if value.Valid {
		d.Zipcode = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		d.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[4])
	} else if value.Valid {
		d.UpdatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[5])
	} else if value.Valid {
		d.Status = delivery.Status(value.String)
	}
	return nil
}

// QueryOrder queries the order edge of the Delivery.
func (d *Delivery) QueryOrder() *OrderQuery {
	return (&DeliveryClient{config: d.config}).QueryOrder(d)
}

// Update returns a builder for updating this Delivery.
// Note that, you need to call Delivery.Unwrap() before calling this method, if this Delivery
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delivery) Update() *DeliveryUpdateOne {
	return (&DeliveryClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Delivery) Unwrap() *Delivery {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delivery is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delivery) String() string {
	var builder strings.Builder
	builder.WriteString("Delivery(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", city=")
	builder.WriteString(d.City)
	builder.WriteString(", street=")
	builder.WriteString(d.Street)
	builder.WriteString(", zipcode=")
	builder.WriteString(d.Zipcode)
	builder.WriteString(", created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Deliveries is a parsable slice of Delivery.
type Deliveries []*Delivery

func (d Deliveries) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
