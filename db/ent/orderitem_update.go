// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/TylerGrey/ent-shop/db/ent/order"
	"github.com/TylerGrey/ent-shop/db/ent/orderitem"
	"github.com/TylerGrey/ent-shop/db/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks      []Hook
	mutation   *OrderItemMutation
	predicates []predicate.OrderItem
}

// Where adds a new predicate for the builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.predicates = append(oiu.predicates, ps...)
	return oiu
}

// SetUpdatedAt sets the updated_at field.
func (oiu *OrderItemUpdate) SetUpdatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// SetOrderPrice sets the orderPrice field.
func (oiu *OrderItemUpdate) SetOrderPrice(i int32) *OrderItemUpdate {
	oiu.mutation.ResetOrderPrice()
	oiu.mutation.SetOrderPrice(i)
	return oiu
}

// AddOrderPrice adds i to orderPrice.
func (oiu *OrderItemUpdate) AddOrderPrice(i int32) *OrderItemUpdate {
	oiu.mutation.AddOrderPrice(i)
	return oiu
}

// SetCount sets the count field.
func (oiu *OrderItemUpdate) SetCount(i int32) *OrderItemUpdate {
	oiu.mutation.ResetCount()
	oiu.mutation.SetCount(i)
	return oiu
}

// AddCount adds i to count.
func (oiu *OrderItemUpdate) AddCount(i int32) *OrderItemUpdate {
	oiu.mutation.AddCount(i)
	return oiu
}

// SetOrderID sets the order edge to Order by id.
func (oiu *OrderItemUpdate) SetOrderID(id int) *OrderItemUpdate {
	oiu.mutation.SetOrderID(id)
	return oiu
}

// SetNillableOrderID sets the order edge to Order by id if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderID(id *int) *OrderItemUpdate {
	if id != nil {
		oiu = oiu.SetOrderID(*id)
	}
	return oiu
}

// SetOrder sets the order edge to Order.
func (oiu *OrderItemUpdate) SetOrder(o *Order) *OrderItemUpdate {
	return oiu.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearOrder clears the order edge to Order.
func (oiu *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	oiu.mutation.ClearOrder()
	return oiu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(oiu.hooks) == 0 {
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	if ps := oiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if value, ok := oiu.mutation.OrderPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldOrderPrice,
		})
	}
	if value, ok := oiu.mutation.AddedOrderPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldOrderPrice,
		})
	}
	if value, ok := oiu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldCount,
		})
	}
	if value, ok := oiu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldCount,
		})
	}
	if oiu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetUpdatedAt sets the updated_at field.
func (oiuo *OrderItemUpdateOne) SetUpdatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// SetOrderPrice sets the orderPrice field.
func (oiuo *OrderItemUpdateOne) SetOrderPrice(i int32) *OrderItemUpdateOne {
	oiuo.mutation.ResetOrderPrice()
	oiuo.mutation.SetOrderPrice(i)
	return oiuo
}

// AddOrderPrice adds i to orderPrice.
func (oiuo *OrderItemUpdateOne) AddOrderPrice(i int32) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderPrice(i)
	return oiuo
}

// SetCount sets the count field.
func (oiuo *OrderItemUpdateOne) SetCount(i int32) *OrderItemUpdateOne {
	oiuo.mutation.ResetCount()
	oiuo.mutation.SetCount(i)
	return oiuo
}

// AddCount adds i to count.
func (oiuo *OrderItemUpdateOne) AddCount(i int32) *OrderItemUpdateOne {
	oiuo.mutation.AddCount(i)
	return oiuo
}

// SetOrderID sets the order edge to Order by id.
func (oiuo *OrderItemUpdateOne) SetOrderID(id int) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderID(id)
	return oiuo
}

// SetNillableOrderID sets the order edge to Order by id if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderID(id *int) *OrderItemUpdateOne {
	if id != nil {
		oiuo = oiuo.SetOrderID(*id)
	}
	return oiuo
}

// SetOrder sets the order edge to Order.
func (oiuo *OrderItemUpdateOne) SetOrder(o *Order) *OrderItemUpdateOne {
	return oiuo.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearOrder clears the order edge to Order.
func (oiuo *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrder()
	return oiuo
}

// Save executes the query and returns the updated entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *OrderItem
	)
	if len(oiuo.hooks) == 0 {
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			mut = oiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	oi, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return oi
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (oi *OrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if value, ok := oiuo.mutation.OrderPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldOrderPrice,
		})
	}
	if value, ok := oiuo.mutation.AddedOrderPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldOrderPrice,
		})
	}
	if value, ok := oiuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldCount,
		})
	}
	if value, ok := oiuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: orderitem.FieldCount,
		})
	}
	if oiuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	oi = &OrderItem{config: oiuo.config}
	_spec.Assign = oi.assignValues
	_spec.ScanValues = oi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return oi, nil
}
