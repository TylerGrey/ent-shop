// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/TylerGrey/ent-shop/db/ent/member"
	"github.com/TylerGrey/ent-shop/db/ent/order"
	"github.com/TylerGrey/ent-shop/db/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks      []Hook
	mutation   *MemberMutation
	predicates []predicate.Member
}

// Where adds a new predicate for the builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetCity sets the city field.
func (mu *MemberUpdate) SetCity(s string) *MemberUpdate {
	mu.mutation.SetCity(s)
	return mu
}

// SetNillableCity sets the city field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCity(s *string) *MemberUpdate {
	if s != nil {
		mu.SetCity(*s)
	}
	return mu
}

// ClearCity clears the value of city.
func (mu *MemberUpdate) ClearCity() *MemberUpdate {
	mu.mutation.ClearCity()
	return mu
}

// SetStreet sets the street field.
func (mu *MemberUpdate) SetStreet(s string) *MemberUpdate {
	mu.mutation.SetStreet(s)
	return mu
}

// SetNillableStreet sets the street field if the given value is not nil.
func (mu *MemberUpdate) SetNillableStreet(s *string) *MemberUpdate {
	if s != nil {
		mu.SetStreet(*s)
	}
	return mu
}

// ClearStreet clears the value of street.
func (mu *MemberUpdate) ClearStreet() *MemberUpdate {
	mu.mutation.ClearStreet()
	return mu
}

// SetZipcode sets the zipcode field.
func (mu *MemberUpdate) SetZipcode(s string) *MemberUpdate {
	mu.mutation.SetZipcode(s)
	return mu
}

// SetNillableZipcode sets the zipcode field if the given value is not nil.
func (mu *MemberUpdate) SetNillableZipcode(s *string) *MemberUpdate {
	if s != nil {
		mu.SetZipcode(*s)
	}
	return mu
}

// ClearZipcode clears the value of zipcode.
func (mu *MemberUpdate) ClearZipcode() *MemberUpdate {
	mu.mutation.ClearZipcode()
	return mu
}

// SetUpdatedAt sets the updated_at field.
func (mu *MemberUpdate) SetUpdatedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetName sets the name field.
func (mu *MemberUpdate) SetName(s string) *MemberUpdate {
	mu.mutation.SetName(s)
	return mu
}

// AddOrderIDs adds the orders edge to Order by ids.
func (mu *MemberUpdate) AddOrderIDs(ids ...int) *MemberUpdate {
	mu.mutation.AddOrderIDs(ids...)
	return mu
}

// AddOrders adds the orders edges to Order.
func (mu *MemberUpdate) AddOrders(o ...*Order) *MemberUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mu.AddOrderIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// RemoveOrderIDs removes the orders edge to Order by ids.
func (mu *MemberUpdate) RemoveOrderIDs(ids ...int) *MemberUpdate {
	mu.mutation.RemoveOrderIDs(ids...)
	return mu
}

// RemoveOrders removes orders edges to Order.
func (mu *MemberUpdate) RemoveOrders(o ...*Order) *MemberUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldCity,
		})
	}
	if mu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldCity,
		})
	}
	if value, ok := mu.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldStreet,
		})
	}
	if mu.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldStreet,
		})
	}
	if value, ok := mu.mutation.Zipcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldZipcode,
		})
	}
	if mu.mutation.ZipcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldZipcode,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldName,
		})
	}
	if nodes := mu.mutation.RemovedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.OrdersTable,
			Columns: []string{member.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.OrdersTable,
			Columns: []string{member.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// SetCity sets the city field.
func (muo *MemberUpdateOne) SetCity(s string) *MemberUpdateOne {
	muo.mutation.SetCity(s)
	return muo
}

// SetNillableCity sets the city field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCity(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetCity(*s)
	}
	return muo
}

// ClearCity clears the value of city.
func (muo *MemberUpdateOne) ClearCity() *MemberUpdateOne {
	muo.mutation.ClearCity()
	return muo
}

// SetStreet sets the street field.
func (muo *MemberUpdateOne) SetStreet(s string) *MemberUpdateOne {
	muo.mutation.SetStreet(s)
	return muo
}

// SetNillableStreet sets the street field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableStreet(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetStreet(*s)
	}
	return muo
}

// ClearStreet clears the value of street.
func (muo *MemberUpdateOne) ClearStreet() *MemberUpdateOne {
	muo.mutation.ClearStreet()
	return muo
}

// SetZipcode sets the zipcode field.
func (muo *MemberUpdateOne) SetZipcode(s string) *MemberUpdateOne {
	muo.mutation.SetZipcode(s)
	return muo
}

// SetNillableZipcode sets the zipcode field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableZipcode(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetZipcode(*s)
	}
	return muo
}

// ClearZipcode clears the value of zipcode.
func (muo *MemberUpdateOne) ClearZipcode() *MemberUpdateOne {
	muo.mutation.ClearZipcode()
	return muo
}

// SetUpdatedAt sets the updated_at field.
func (muo *MemberUpdateOne) SetUpdatedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetName sets the name field.
func (muo *MemberUpdateOne) SetName(s string) *MemberUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// AddOrderIDs adds the orders edge to Order by ids.
func (muo *MemberUpdateOne) AddOrderIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.AddOrderIDs(ids...)
	return muo
}

// AddOrders adds the orders edges to Order.
func (muo *MemberUpdateOne) AddOrders(o ...*Order) *MemberUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return muo.AddOrderIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// RemoveOrderIDs removes the orders edge to Order by ids.
func (muo *MemberUpdateOne) RemoveOrderIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.RemoveOrderIDs(ids...)
	return muo
}

// RemoveOrders removes orders edges to Order.
func (muo *MemberUpdateOne) RemoveOrders(o ...*Order) *MemberUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return muo.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Member
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (m *Member, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Member.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldCity,
		})
	}
	if muo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldCity,
		})
	}
	if value, ok := muo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldStreet,
		})
	}
	if muo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldStreet,
		})
	}
	if value, ok := muo.mutation.Zipcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldZipcode,
		})
	}
	if muo.mutation.ZipcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: member.FieldZipcode,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: member.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldName,
		})
	}
	if nodes := muo.mutation.RemovedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.OrdersTable,
			Columns: []string{member.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.OrdersTable,
			Columns: []string{member.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Member{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
