// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/TylerGrey/ent-shop/db/ent/delivery"
	"github.com/TylerGrey/ent-shop/db/ent/order"
	"github.com/TylerGrey/ent-shop/db/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DeliveryUpdate is the builder for updating Delivery entities.
type DeliveryUpdate struct {
	config
	hooks      []Hook
	mutation   *DeliveryMutation
	predicates []predicate.Delivery
}

// Where adds a new predicate for the builder.
func (du *DeliveryUpdate) Where(ps ...predicate.Delivery) *DeliveryUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetCity sets the city field.
func (du *DeliveryUpdate) SetCity(s string) *DeliveryUpdate {
	du.mutation.SetCity(s)
	return du
}

// SetNillableCity sets the city field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableCity(s *string) *DeliveryUpdate {
	if s != nil {
		du.SetCity(*s)
	}
	return du
}

// ClearCity clears the value of city.
func (du *DeliveryUpdate) ClearCity() *DeliveryUpdate {
	du.mutation.ClearCity()
	return du
}

// SetStreet sets the street field.
func (du *DeliveryUpdate) SetStreet(s string) *DeliveryUpdate {
	du.mutation.SetStreet(s)
	return du
}

// SetNillableStreet sets the street field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableStreet(s *string) *DeliveryUpdate {
	if s != nil {
		du.SetStreet(*s)
	}
	return du
}

// ClearStreet clears the value of street.
func (du *DeliveryUpdate) ClearStreet() *DeliveryUpdate {
	du.mutation.ClearStreet()
	return du
}

// SetZipcode sets the zipcode field.
func (du *DeliveryUpdate) SetZipcode(s string) *DeliveryUpdate {
	du.mutation.SetZipcode(s)
	return du
}

// SetNillableZipcode sets the zipcode field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableZipcode(s *string) *DeliveryUpdate {
	if s != nil {
		du.SetZipcode(*s)
	}
	return du
}

// ClearZipcode clears the value of zipcode.
func (du *DeliveryUpdate) ClearZipcode() *DeliveryUpdate {
	du.mutation.ClearZipcode()
	return du
}

// SetUpdatedAt sets the updated_at field.
func (du *DeliveryUpdate) SetUpdatedAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetStatus sets the status field.
func (du *DeliveryUpdate) SetStatus(d delivery.Status) *DeliveryUpdate {
	du.mutation.SetStatus(d)
	return du
}

// SetOrderID sets the order edge to Order by id.
func (du *DeliveryUpdate) SetOrderID(id int) *DeliveryUpdate {
	du.mutation.SetOrderID(id)
	return du
}

// SetNillableOrderID sets the order edge to Order by id if the given value is not nil.
func (du *DeliveryUpdate) SetNillableOrderID(id *int) *DeliveryUpdate {
	if id != nil {
		du = du.SetOrderID(*id)
	}
	return du
}

// SetOrder sets the order edge to Order.
func (du *DeliveryUpdate) SetOrder(o *Order) *DeliveryUpdate {
	return du.SetOrderID(o.ID)
}

// Mutation returns the DeliveryMutation object of the builder.
func (du *DeliveryUpdate) Mutation() *DeliveryMutation {
	return du.mutation
}

// ClearOrder clears the order edge to Order.
func (du *DeliveryUpdate) ClearOrder() *DeliveryUpdate {
	du.mutation.ClearOrder()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DeliveryUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := delivery.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	if v, ok := du.mutation.Status(); ok {
		if err := delivery.StatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeliveryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeliveryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeliveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delivery.Table,
			Columns: delivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: delivery.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldCity,
		})
	}
	if du.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldCity,
		})
	}
	if value, ok := du.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldStreet,
		})
	}
	if du.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldStreet,
		})
	}
	if value, ok := du.mutation.Zipcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldZipcode,
		})
	}
	if du.mutation.ZipcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldZipcode,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: delivery.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: delivery.FieldStatus,
		})
	}
	if du.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   delivery.OrderTable,
			Columns: []string{delivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   delivery.OrderTable,
			Columns: []string{delivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeliveryUpdateOne is the builder for updating a single Delivery entity.
type DeliveryUpdateOne struct {
	config
	hooks    []Hook
	mutation *DeliveryMutation
}

// SetCity sets the city field.
func (duo *DeliveryUpdateOne) SetCity(s string) *DeliveryUpdateOne {
	duo.mutation.SetCity(s)
	return duo
}

// SetNillableCity sets the city field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableCity(s *string) *DeliveryUpdateOne {
	if s != nil {
		duo.SetCity(*s)
	}
	return duo
}

// ClearCity clears the value of city.
func (duo *DeliveryUpdateOne) ClearCity() *DeliveryUpdateOne {
	duo.mutation.ClearCity()
	return duo
}

// SetStreet sets the street field.
func (duo *DeliveryUpdateOne) SetStreet(s string) *DeliveryUpdateOne {
	duo.mutation.SetStreet(s)
	return duo
}

// SetNillableStreet sets the street field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableStreet(s *string) *DeliveryUpdateOne {
	if s != nil {
		duo.SetStreet(*s)
	}
	return duo
}

// ClearStreet clears the value of street.
func (duo *DeliveryUpdateOne) ClearStreet() *DeliveryUpdateOne {
	duo.mutation.ClearStreet()
	return duo
}

// SetZipcode sets the zipcode field.
func (duo *DeliveryUpdateOne) SetZipcode(s string) *DeliveryUpdateOne {
	duo.mutation.SetZipcode(s)
	return duo
}

// SetNillableZipcode sets the zipcode field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableZipcode(s *string) *DeliveryUpdateOne {
	if s != nil {
		duo.SetZipcode(*s)
	}
	return duo
}

// ClearZipcode clears the value of zipcode.
func (duo *DeliveryUpdateOne) ClearZipcode() *DeliveryUpdateOne {
	duo.mutation.ClearZipcode()
	return duo
}

// SetUpdatedAt sets the updated_at field.
func (duo *DeliveryUpdateOne) SetUpdatedAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetStatus sets the status field.
func (duo *DeliveryUpdateOne) SetStatus(d delivery.Status) *DeliveryUpdateOne {
	duo.mutation.SetStatus(d)
	return duo
}

// SetOrderID sets the order edge to Order by id.
func (duo *DeliveryUpdateOne) SetOrderID(id int) *DeliveryUpdateOne {
	duo.mutation.SetOrderID(id)
	return duo
}

// SetNillableOrderID sets the order edge to Order by id if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableOrderID(id *int) *DeliveryUpdateOne {
	if id != nil {
		duo = duo.SetOrderID(*id)
	}
	return duo
}

// SetOrder sets the order edge to Order.
func (duo *DeliveryUpdateOne) SetOrder(o *Order) *DeliveryUpdateOne {
	return duo.SetOrderID(o.ID)
}

// Mutation returns the DeliveryMutation object of the builder.
func (duo *DeliveryUpdateOne) Mutation() *DeliveryMutation {
	return duo.mutation
}

// ClearOrder clears the order edge to Order.
func (duo *DeliveryUpdateOne) ClearOrder() *DeliveryUpdateOne {
	duo.mutation.ClearOrder()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DeliveryUpdateOne) Save(ctx context.Context) (*Delivery, error) {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := delivery.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	if v, ok := duo.mutation.Status(); ok {
		if err := delivery.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}

	var (
		err  error
		node *Delivery
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeliveryUpdateOne) SaveX(ctx context.Context) *Delivery {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeliveryUpdateOne) sqlSave(ctx context.Context) (d *Delivery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delivery.Table,
			Columns: delivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: delivery.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Delivery.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldCity,
		})
	}
	if duo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldCity,
		})
	}
	if value, ok := duo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldStreet,
		})
	}
	if duo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldStreet,
		})
	}
	if value, ok := duo.mutation.Zipcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delivery.FieldZipcode,
		})
	}
	if duo.mutation.ZipcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delivery.FieldZipcode,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: delivery.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: delivery.FieldStatus,
		})
	}
	if duo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   delivery.OrderTable,
			Columns: []string{delivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   delivery.OrderTable,
			Columns: []string{delivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Delivery{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
